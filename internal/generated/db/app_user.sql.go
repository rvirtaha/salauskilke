// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app_user.sql

package db

import (
	"context"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, credential_identifier, client_identity, serialized_registration_record
FROM app_user
WHERE id = $1
`

// GetUserByID
//
//	SELECT id, credential_identifier, client_identity, serialized_registration_record
//	FROM app_user
//	WHERE id = $1
func (q *Queries) GetUserByID(ctx context.Context, id int32) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.CredentialIdentifier,
		&i.ClientIdentity,
		&i.SerializedRegistrationRecord,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, credential_identifier, client_identity, serialized_registration_record FROM app_user
WHERE client_identity = $1
`

// GetUserByUsername
//
//	SELECT id, credential_identifier, client_identity, serialized_registration_record FROM app_user
//	WHERE client_identity = $1
func (q *Queries) GetUserByUsername(ctx context.Context, clientIdentity []byte) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, clientIdentity)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.CredentialIdentifier,
		&i.ClientIdentity,
		&i.SerializedRegistrationRecord,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO app_user 
    (credential_identifier, client_identity, serialized_registration_record)
VALUES
    ($1, $2, $3)
RETURNING id, credential_identifier, client_identity, serialized_registration_record
`

type InsertUserParams struct {
	CredentialIdentifier         []byte
	ClientIdentity               []byte
	SerializedRegistrationRecord []byte
}

// InsertUser
//
//	INSERT INTO app_user
//	    (credential_identifier, client_identity, serialized_registration_record)
//	VALUES
//	    ($1, $2, $3)
//	RETURNING id, credential_identifier, client_identity, serialized_registration_record
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.CredentialIdentifier, arg.ClientIdentity, arg.SerializedRegistrationRecord)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.CredentialIdentifier,
		&i.ClientIdentity,
		&i.SerializedRegistrationRecord,
	)
	return i, err
}
