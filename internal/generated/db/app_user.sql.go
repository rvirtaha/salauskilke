// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app_user.sql

package db

import (
	"context"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, registration_record, credential_identifier, username, created_at
FROM app_user
WHERE id = $1
`

// GetUserByID
//
//	SELECT id, registration_record, credential_identifier, username, created_at
//	FROM app_user
//	WHERE id = $1
func (q *Queries) GetUserByID(ctx context.Context, id int32) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.RegistrationRecord,
		&i.CredentialIdentifier,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, registration_record, credential_identifier, username, created_at FROM app_user
WHERE username = $1
`

// GetUserByUsername
//
//	SELECT id, registration_record, credential_identifier, username, created_at FROM app_user
//	WHERE username = $1
func (q *Queries) GetUserByUsername(ctx context.Context, username string) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.RegistrationRecord,
		&i.CredentialIdentifier,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO app_user 
    (registration_record, credential_identifier, username)
VALUES
    ($1, $2, $3)
RETURNING id, registration_record, credential_identifier, username, created_at
`

type InsertUserParams struct {
	RegistrationRecord   []byte
	CredentialIdentifier []byte
	Username             string
}

// InsertUser
//
//	INSERT INTO app_user
//	    (registration_record, credential_identifier, username)
//	VALUES
//	    ($1, $2, $3)
//	RETURNING id, registration_record, credential_identifier, username, created_at
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.RegistrationRecord, arg.CredentialIdentifier, arg.Username)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.RegistrationRecord,
		&i.CredentialIdentifier,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}
