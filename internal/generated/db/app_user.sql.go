// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app_user.sql

package db

import (
	"context"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, public_key, encryption_salt, encrypted_private_key, created_at
FROM app_user
WHERE id = $1
`

// GetUserByID
//
//	SELECT id, username, password_hash, public_key, encryption_salt, encrypted_private_key, created_at
//	FROM app_user
//	WHERE id = $1
func (q *Queries) GetUserByID(ctx context.Context, id int32) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.PublicKey,
		&i.EncryptionSalt,
		&i.EncryptedPrivateKey,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO app_user 
    (username, password_hash, public_key, encryption_salt, encrypted_private_key)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING id, username, password_hash, public_key, encryption_salt, encrypted_private_key, created_at
`

type InsertUserParams struct {
	Username            string
	PasswordHash        string
	PublicKey           []byte
	EncryptionSalt      []byte
	EncryptedPrivateKey []byte
}

// InsertUser
//
//	INSERT INTO app_user
//	    (username, password_hash, public_key, encryption_salt, encrypted_private_key)
//	VALUES
//	    ($1, $2, $3, $4, $5)
//	RETURNING id, username, password_hash, public_key, encryption_salt, encrypted_private_key, created_at
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Username,
		arg.PasswordHash,
		arg.PublicKey,
		arg.EncryptionSalt,
		arg.EncryptedPrivateKey,
	)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.PublicKey,
		&i.EncryptionSalt,
		&i.EncryptedPrivateKey,
		&i.CreatedAt,
	)
	return i, err
}
